#! /usr/bin/env perl

###########################################################################
##
## PDB部分削除プログラム					Last Update 2010/10/11
##	 PDBの接続情報を削除します
##		$ discone 入力ファイル 出力ファイル
##		$ discone 入出力ファイル
##
###########################################################################

use strict;
use File::Temp;

my $in = shift(@ARGV);
my $out = shift(@ARGV);

if(($in =~ /^--help$/i) || ($in =~ /^-H$/i)){
	&help;
	exit;
}

if($in !~ /^$/){
	if(-f $in){
		my $tmp = File::Temp->new(TEMPLATE => '.discone-XXXXXX');
		$SIG{'TERM'} = $SIG{'PIPE'} = $SIG{'HUP'} = $SIG{'INT'} = sub {
			unlink $tmp;
			exit;
		};	# プログラムが中断した場合の処理
		&work($in, $tmp);
		if($out =~ /^$/){
			print " INFORMATION: 出力先が指定されていません．\n";
			print " INFORMATION: 上書き(O)，別名で保存(S)，何もしない(C)\n > ";
			my $user = <STDIN>;
			$user =~ s/\n//;
			if($user =~ /^O$/i){
				unlink $in;
				rename $tmp, $in;
			}
			elsif($user =~ /^S$/i){
				print " ファイル名: ";
				$user = <STDIN>;
				$user =~ s/\n//;
				rename $tmp, $user;
			}
			else{
				unlink $tmp;
				exit;
			}
		}
		else{
			rename $tmp, $out;
		}
	}
	else{
		print " ERROR: 指定された入力ファイルは存在しません．\n";
	}
}
else{
	print " ERROR: 入力ファイルを指定してください．\n";
}
exit;

# =============== <work> ===============
sub work{
my $in = shift(@_);
my $out = shift(@_);

open(IN, "$in");
open(OUT, "> $out");
while(<IN>){
	if(/^CONECT/){
		next;
	}
	s/\r\n/\n/;
	print OUT;
}
close(IN);
close(OUT);
}

# =============== <help> ===============
sub help{
print " PDB接続情報削除プログラム\n";
print "  \$ discone 入力ファイル 出力ファイル\n";
print "  \$ discone 入出力ファイル\n";
}
